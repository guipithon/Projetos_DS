# -*- coding: utf-8 -*-
"""Análise exploratória dos Dados do Airbnb de Nova York - NY .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bgBHYBENeyMMWm-dc99vzqRv3Bj0LAgr

# **Análise exploratória dos Dados do Airbnb de Nova York - NY**
 <img alt="Analisando Airbnb" width="15%" src="https://www.area360.com.au/wp-content/uploads/2017/09/airbnb-logo.jpg">

*Por Guilherme Pithon*


---


Se alguém te pedisse para imaginar como seria a maior rede hoteleira do mundo, você certamente imaginaria em uma rede com milhares de hotéis e funcionários, certo?

Bem, esse é o pensamento normal de qualquer pessoa, mas foi o caminho oposto que o Airbnb, maior empresa hoteleira do mundo, fez. A plataforma criada em 2008 por três estudantes de Design dos Estados Unidos não possui nenhum hotel própiro e tem como objetivo conectar pessoas quem disponibilizem ou queiram alugar quaisquer tipos acomodações ao redor do mundo.

Atualmente o serviço já acomodou mais **de 300 milhões de pessoas em mais de 30 mil cidades e 192 países**, desbancando qualquer rede hoteleira.  

A empresa também disponibiliza gratuitamente em seu site, dados do site, para algumas das principais cidades do mundo. Por meio do portal [Inside Airbnb](http://insideairbnb.com/get-the-data.html), é possível baixar uma grande quantidade de dados para desenvolver projetos e soluções de Data Science. 

Neste notebook, iremos analisar de forma exploratória os dados referentes à cidade de Nova York, e ver quais insights podem ser extraídos a partir de dados brutos.

## 01. Obtenção dos dados
Todos dados utilizados nesse notebook são oficiais e foram extraídos do portal do Inside Airbnb. Logo nesta etapa apenas importamos as bibliotecas necessárias e o arquivo de análise.
"""

# Commented out IPython magic to ensure Python compatibility.
## Importação dos pacotes necessários
import pandas as pd
import seaborn as sns
import  matplotlib.pyplot as plt

# %matplotlib inline

df = pd.read_csv("http://data.insideairbnb.com/united-states/ny/new-york-city/2021-02-04/visualisations/listings.csv")

"""## 02. Análise Inicial dos Dados

Antes de iniciarmos nossa análise, é interessante definir as variáveis que iremos trabalhar ao decorrer deste artigo. Por isso, segue abaixo nosso dicionário de variáveis

**Dicionário das variáveis**

* `id` - número de id gerado para identificar o imóvel
* `name` - nome da propriedade anunciada
* `host_id` - número de id do proprietário (anfitrião) da propriedade
* `host_name` - Nome do anfitrião
* `neighbourhood_group` - esta coluna não contém nenhum valor válido
* `neighbourhood` - nome do bairro
* `latitude` - coordenada da latitude da propriedade
* `longitude` - coordenada da longitude da propriedade
* `room_type` - informa o tipo de quarto que é oferecido
* `price` - preço para alugar o imóvel
* `minimum_nights` - quantidade mínima de noites para reservar
* `number_of_reviews` - número de reviews que a propriedade possui
* `last_review` - data do último review
* `reviews_per_month` - quantidade de reviews por mês
* `calculated_host_listings_count` - quantidade de imóveis do mesmo anfitrião
* `availability_365` - número de dias de disponibilidade dentro de 365 dias

Outro ponto interessante, é conhecer a "cara" do nosso dataset, verificando as cinco primeiras entradas dele.
"""

df.head()

"""Tendo uma ideia inicial de como está estruturado nosso Dataset, vamos entender seu dimensionamento, analisando a quantidade de entradas, seus tipos e bem como nossas variáveis"""

# identificar o volume de dados do DataFrame
print("Entradas:\t {}".format(df.shape[0]))
print("Variáveis:\t {}\n".format(df.shape[1]))

# verificar as 5 primeiras entradas do dataset
display(df.dtypes)

"""## 03. Tratamento dos dados

A qualidade de um dataset está relacionado ligado com a qualidade das informações que estão contidas nele. 

Logo, para tratar nosso dados, vamos observar dois pontos importantes:



*   **Valores Ausentes** 
*   **Valores Outliers**

### 3.1 Calculando a pocentagem de valores ausentes
"""

# ordenar em ordem decrescente as variáveis por seus valores ausentes
(df.isnull().sum() / df.shape[0]).sort_values(ascending=False)

"""Analisando o resultado retornado, observamos que estamos trabalhando com um ótimo dataset, uma vez que que a porcentaagem de valores ausentes das variáveis **"reviews_per_month"** e **"last_review"** é baixa (25%), enquanto as demais não apresentam ou apresentam uma porcentagem insignificativa de valores ausentes

###3.2 Identificação de Outliers

Uma forma interessante para identificar outliers é por meio de histomagramas. Através deles, é possível ter uma visão geral de como estão distribuidos os dados
"""

# plotar o histograma das variáveis numéricas
df.hist(bins=15, figsize=(15,10));

"""De uma forma geral, é possível identifciar alguns pequenos indícios outliers em nosso Dataset, uma vez que sua distribuição aparenta ser bem uniforme.





Uma forma de verificar mais a fundo essa informação é através de um resumo estatístico das nossas principais variáveis.
"""

df[['price', 'minimum_nights', 'number_of_reviews', 'reviews_per_month',
    'calculated_host_listings_count', 'availability_365']].describe()

"""Analisando nosso resumo estatístico conseguimos levantar duas hipóteses em relação aos nossos outliers



*   A variável **"minimum_nights"** apresenta um valor acima dos 365 dias no ano, mesmo possuindo 75% dos valores abaixo de 30
*   A variável **"price"** possui 75% do seu valor abaixo de 151 porém seu valor máximo é 10.000

Dessa forma, vamos analisar o impacto desses valores em nosso dataset





"""

# minimum_nights
df.minimum_nights.plot(kind='box', vert=False, figsize=(15, 3))
plt.show()

# ver quantidade de valores acima de 30 dias para minimum_nights
print("minimum_nights: valores acima de 30:")
print("{} entradas".format(len(df[df.minimum_nights > 30])))
print("{:.4f}%".format((len(df[df.minimum_nights > 30]) / df.shape[0])*100))

# minimum_nights
df.price.plot(kind='box', vert=False, figsize=(15, 3))
plt.show()

# ver quantidade de valores acima de 151 dias para minimum_nights
print("price: valores acima de 30:")
print("{} entradas".format(len(df[df.minimum_nights > 151 ])))
print("{:.4f}%".format((len(df[df.minimum_nights > 151]) / df.shape[0])*100))

"""### 3.3 Limpeza dos Dados


Já que identificamos outliers nas variáveis **"price"** e **"minimum_nights"**, vamos agora limpar o Dataframe e plotar novamente nosso histograma
"""

# remover os *outliers* em um novo DataFrame
df_clean = df.copy()
df_clean.drop(df_clean[df_clean.price > 151].index, axis=0, inplace=True)

df_clean.drop(df_clean[df_clean.minimum_nights > 30].index, axis=0, inplace=True)
# plotar o histograma para as variáveis numéricas
df_clean.hist(bins=15, figsize=(15,10));

"""##04. Análises dos Dados

Esta etapa será dedicada para realização do teste de correlação entre as variáveis, bem como para retirar alguns insights dos dados.

###4.1 Teste de Correlação

Correlação significa que existe uma relação entre duas coisas. No nosso contexto, estamos buscando relação ou semelhança entre duas variáveis.

Desta forma faremos:

*   Criar uma matriz de correlação
*   Gerar um heatmap a partir dessa matriz, usando a biblioteca seaborn
"""

# criar uma matriz de correlação
corr = df_clean[['price', 'minimum_nights', 'number_of_reviews', 'reviews_per_month',
    'calculated_host_listings_count', 'availability_365']].corr()

display(corr)

sns.heatmap(corr, cmap='RdBu', fmt='.2f', square=True, linecolor='white', annot=True);

"""Analisando nossos resultados, concluimos que não há nenhuma correlação significativa.

###4.2 Outras análises

Uma análise interessante é observar qual o tipo de imóvel mais estão disponíveis no AirBnb e sua porcentagem em relação ao geral
"""

# mostrar a quantidade de cada tipo de imóvel disponível
df_clean.room_type.value_counts()

# mostrar a porcentagem de cada tipo de imóvel disponível
df_clean.room_type.value_counts() / df_clean.shape[0]

"""A contagem dos tipos de variável além de nós dar insights interessantes, também nos auxilia na interpretação das próximas análises.

Quando fazemos o cálculo para saber os cinco bairros com maiores médias de preços temos o seguinte resultado  
"""

df_clean.groupby(['neighbourhood']).price.mean().sort_values(ascending=False)[:5]

"""Porém quando fazemos a contagem dos dados vemos que a amostra de cada bairro é relativamente pequena, e por isso o valor da média pode estar um pouco mascarado"""

print("Prince's Bay = {}".format(df_clean.neighbourhood.value_counts()["Prince's Bay"]))
print("Belle Harbor = {}".format(df_clean.neighbourhood.value_counts()["Belle Harbor"]))
print("Howland Hook = {}".format(df_clean.neighbourhood.value_counts()["Howland Hook"]))
print("Mount Eden = {}".format(df_clean.neighbourhood.value_counts()["Mount Eden"]))
print("Oakwood = {}".format(df_clean.neighbourhood.value_counts()["Oakwood"]))

df_clean.neighbourhood.value_counts().sort_values(ascending=False)[:10]

"""Ao analsiar a contagem dos demais dados, vemos que nossa amostra inicial que mostra a maior média de preços é possui poucos dados, e que por isso, podem gerar um valor "tendencioso"

Uma saída para uma análise visual é através do gráticio abaixo, em que através da latitude e longetidude, retorna um gráfico de calor com os maiores preços.
"""

# plotar os imóveis pela latitude-longitude
df_clean.plot(kind="scatter", x='longitude', y='latitude', alpha=0.4, c=df_clean['price'], s=8,
              cmap=plt.get_cmap('jet'), figsize=(12,8));

"""##05. Conclusões

Foi feita apenas uma análise superficial na base de dados do Airbnb, porém já se percebeu que existem outliers em algumas das variáveis.

Também se notou que em algumas localidades há poucos imóveis disponíveis, o que pode distorcer as informações estatísticas de alguns atributos.

Por fim, lembra-se que este dataset é uma versão resumida, ideal apenas para uma abordagem inicial. Recomenda-se que seja usado, em uma próxima análise exploratória, o conjunto de dados completos, com 106 atributos disponíveis.

"""